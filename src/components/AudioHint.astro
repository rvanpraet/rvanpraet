---
import type { GetStaticPaths } from 'astro'
import type { HTMLAttributes } from 'astro/types'
import { twMerge } from 'tailwind-merge'

type Props = HTMLAttributes<'div'> & {
  direction?: 'right' | 'left' | 'up' | 'down'
}

const { class: className, direction, ...props } = Astro.props

const directionConfig = {
  right: {
    flexDirection: 'row',
    arrowRotation: '0deg',
    bounceAmountX: '4px',
    bounceAmountY: '0px',
  },
  left: {
    flexDirection: 'row-reverse',
    arrowRotation: '180deg',
    bounceAmountX: '-4px',
    bounceAmountY: '0px',
  },
  down: {
    flexDirection: 'column',
    arrowRotation: '90deg',
    bounceAmountX: '0px',
    bounceAmountY: '4px',
  },
  up: {
    flexDirection: 'column-reverse',
    arrowRotation: '270deg',
    bounceAmountX: '0px',
    bounceAmountY: '-4px',
  },
}

const config = directionConfig[direction]
const classes = twMerge('audio-hint', className)
---

<div class={classes} data-direction={direction} {...props}>
  <span class="hint-text">toggle sound</span>
  <span class="hint-arrow-wrapper">
    <span class="hint-arrow">â†’</span>
  </span>
</div>

<script>
  document.addEventListener('enter-experience-clicked', () => {
    const audioHint: HTMLElement = document.querySelector('.audio-hint')

    if (audioHint) {
      audioHint.style.animation = `
        bounceDirection 2s ease-in-out infinite,
        fadeOut 1.5s ease-in-out 10s forwards;
      `
    }
  })
</script>

<style
  define:vars={{
    flexDirection: config.flexDirection,
    arrowRotation: config.arrowRotation,
    bounceAmountX: config.bounceAmountX,
    bounceAmountY: config.bounceAmountY,
  }}
>
  .audio-hint {
    position: relative;
    left: 14px;
    display: flex;
    align-items: start;
    flex-direction: var(--flexDirection);
    white-space: nowrap;
    gap: calc(var(--spacing) * 1);
    animation:
      bounceDirection 5s ease-in-out infinite,
      fadeOut 1.5s ease-in-out 10s forwards;
  }

  .hint-text {
    font-size: var(--text-xs);
    font-weight: var(--font-weight-extralight);
    text-transform: lowercase;
    letter-spacing: 0.05em;
    color: var(--color-white);
  }

  .hint-arrow-wrapper {
    font-size: var(--text-xs);
    font-weight: var(--font-weight-extralight);
    display: flex;
    align-items: center;
    justify-content: center;
    transform: rotate(var(--arrowRotation));
  }

  .hint-arrow {
    color: var(--color-salmon);
    animation: bounceArrow 2s ease-in-out infinite;
  }

  /* Dynamic bounce animation based on direction */
  @keyframes bounceDirection {
    0%,
    100% {
      transform: translate(0, 0);
    }
    50% {
      transform: translate(calc(var(--bounceAmountX)), calc(var(--bounceAmountY)));
    }
  }

  @keyframes bounceArrow {
    0%,
    100% {
      transform: translate(0, 0) scale(1);
    }
    50% {
      transform: translate(calc(var(--bounceAmountX)), calc(var(--bounceAmountY))), scale(1.1);
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
      pointer-events: none;
    }
  }
</style>
