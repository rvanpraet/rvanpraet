---
import ScrollIcon from '@/components/ScrollIcon.astro'
import Three from '../components/Three.astro'
import Layout from '../layouts/Layout.astro'
// import GridContent from '@/components/GridContent.astro'
import ExperienceLoader from '@/components/ExperienceLoader.astro'
import InlineHighlight from '@/components/InlineHighlight.astro'
import NavMenu from '@/components/NavMenu.astro'
import SlicedLetter from '@/components/SlicedLetter.astro'
import FullpageSection from '@/components/FullpageSection.astro'
import Timeline from '@/components/Timeline.astro'

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout>
  <NavMenu />
  <ExperienceLoader />

  <Three />

  <ScrollIcon />

  <Timeline
    class="relative z-10"
    items={[
      {
        dateFrom: '2024',
        dateTo: 'Current',
        title: 'Freelance',
        subtitle: 'Creative Developer - Sound Designer - Immersive Artist',
        description:
          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam egestas odio et libero consequat placerat. Integer malesuada feugiat vestibulum. Quisque tristique quam metus, a gravida odio dictum eu. Proin euismod efficitur risus, eu placerat libero fringilla nec. Pellentesque fermentum lacus et sapien porta, eu iaculis erat rhoncus. Sed non ipsum a nisi consequat eleifend. Sed eget laoreet tortor. Sed varius turpis ut ante maximus, eget pharetra dolor consectetur. Fusce nec nulla mauris. Nullam sagittis ipsum a risus ultricies, sed lacinia arcu sodales.',
      },
      {
        dateFrom: '2021',
        dateTo: '2024',
        title: 'Fabrique',
        subtitle: 'Frontend Developer',
        description:
          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam egestas odio et libero consequat placerat. Integer malesuada feugiat vestibulum. Quisque tristique quam metus, a gravida odio dictum eu. Proin euismod efficitur risus, eu placerat libero fringilla nec. Pellentesque fermentum lacus et sapien porta, eu iaculis erat rhoncus. Sed non ipsum a nisi consequat eleifend. Sed eget laoreet tortor. Sed varius turpis ut ante maximus, eget pharetra dolor consectetur. Fusce nec nulla mauris. Nullam sagittis ipsum a risus ultricies, sed lacinia arcu sodales.',
      },
      {
        dateFrom: '2020',
        dateTo: '2021',
        title: 'Thuisleefgroep',
        subtitle: 'Frontend Developer',
        description:
          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam egestas odio et libero consequat placerat. Integer malesuada feugiat vestibulum. Quisque tristique quam metus, a gravida odio dictum eu. Proin euismod efficitur risus, eu placerat libero fringilla nec. Pellentesque fermentum lacus et sapien porta, eu iaculis erat rhoncus. Sed non ipsum a nisi consequat eleifend. Sed eget laoreet tortor. Sed varius turpis ut ante maximus, eget pharetra dolor consectetur. Fusce nec nulla mauris. Nullam sagittis ipsum a risus ultricies, sed lacinia arcu sodales.',
      },
      {
        dateFrom: '2018',
        dateTo: '2020',
        title: 'Vattenfall',
        subtitle: 'Frontend Developer',
        description:
          'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam egestas odio et libero consequat placerat. Integer malesuada feugiat vestibulum. Quisque tristique quam metus, a gravida odio dictum eu. Proin euismod efficitur risus, eu placerat libero fringilla nec. Pellentesque fermentum lacus et sapien porta, eu iaculis erat rhoncus. Sed non ipsum a nisi consequat eleifend. Sed eget laoreet tortor. Sed varius turpis ut ante maximus, eget pharetra dolor consectetur. Fusce nec nulla mauris. Nullam sagittis ipsum a risus ultricies, sed lacinia arcu sodales.',
      },
    ]}
  />

  <!-- <section class="introduction-dummy relative z-10 h-screen w-screen" data-model-id="0"></section>
  <section class="introduction-dummy relative z-10 h-screen w-screen" data-model-id="1"></section>
  <section class="introduction-dummy relative z-10 h-screen w-screen" data-model-id="2"></section> -->

  <!-- <div class="introduction-entropy relative z-10"></div> -->

  <!-- <div class="content-wrapper relative z-10 h-screen">
    <FullpageSection className="introduction-general" data-model-id="8">
      <h1 id="igh" class="row-start-4 col-start-7 col-span-6">
        AB<span class="mx-2"
          ><SlicedLetter className="text-green">O</SlicedLetter><span class="wave-y-2 mx-4">U</span></span
        ><InlineHighlight color="white">T</InlineHighlight>
      </h1>

      <p id="igt1" class="row-start-7 col-start-7 col-span-6">
        I'm passionate about technology—<InlineHighlight className="mx-16" color="white"
          >I love to create.</InlineHighlight
        >Storytelling, emotion, mystery: these are the words that shape my approach to<InlineHighlight className="mx-12"
          >creativity and art.</InlineHighlight
        >I work with both<InlineHighlight className="mx-12" color="green">code and sound</InlineHighlight>as means to
        translate my vision to the world.
      </p>
      <p id="igt2" class="row-start-9 col-start-8 col-span-5">
        Inspired by the<InlineHighlight className="mx-16" color="green">natural world</InlineHighlight>, its patterns,
        rhythms and quiet complexity often<InlineHighlight className="mx-12" color="white"
          >find their way</InlineHighlight
        > into my work.<br />Through<InlineHighlight className="mx-12" color="red">immersion and art</InlineHighlight>I
        aim to evoke feeling,<InlineHighlight className="mx-12" color="yellow">spark</InlineHighlight>curiosity, and
        invite a<InlineHighlight className="ml-12" color="white">moment of reflection.</InlineHighlight>
      </p>
    </FullpageSection>

    <FullpageSection className="introduction-development" data-model-id="9">
      <h1 id="idh" class="row-start-3 col-start-1 col-span-12">
        C<SlicedLetter className="mx-4 wave-y-1 text-yellow">O</SlicedLetter>DIN<InlineHighlight color="white"
          >G</InlineHighlight
        >
      </h1>

      <p id="idt1" class="row-start-7 col-start-1 col-span-6">
        I'm a <InlineHighlight className="mx-8" color="white">developer</InlineHighlight> with a focus on building interactive
        and engaging digital experiences. My work ranges from <InlineHighlight className="mx-8"
          >web development</InlineHighlight
        > to <InlineHighlight className="mx-8" color="green">creative coding</InlineHighlight> for installations and art.
      </p>

      <p id="idt2" class="row-start-9 col-start-3 col-span-5">
        I use modern tools and frameworks to bring <InlineHighlight className="mx-12" color="white"
          >ideas</InlineHighlight
        > to life—whether it's a <InlineHighlight className="ml-8" color="yellow">responsive website</InlineHighlight>
        <InlineHighlight className="mx-8" color="green">visual experiment</InlineHighlight> or <InlineHighlight
          className="mx-8"
          color="red">immersive piece.</InlineHighlight
        > I enjoy <InlineHighlight className="mx-8" color="white">exploring</InlineHighlight> the intersection of code, design,
        and user experience.
      </p>
    </FullpageSection>
  </div> -->
</Layout>

<!-- <FullpageSection className="introduction-development-previews">
  <ProjectsPreview
    projects={[
      { href: '/', image: { src: 'https://picsum.photos/400?random=1', alt: 'picture alt' } },
      { href: '/', image: { src: 'https://picsum.photos/400?random=2', alt: 'picture alt' } },
      { href: '/', image: { src: 'https://picsum.photos/400?random=3', alt: 'picture alt' } },
    ]}
  />
</FullpageSection> -->

<!-- <FullpageSection className="introduction-new-media" data-model-id="10">
  <h1 id="inmh" class="uppercase">New Media & Immersive Installations</h1>
  <p id="inmt">
    I’m fascinated by the potential of immersive environments to blur the lines between the digital and physical. Using
    tools like TouchDesigner, it's possible to create responsive systems that connect light, sound, and movement—turning
    spaces into living, reactive experiences. These formats offer a unique way to tell stories, provoke emotion, and
    engage the senses beyond the screen.
  </p>
</FullpageSection> -->

<!-- <div class="loading"></div> -->

<script>
  import gsap from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'

  import Lenis from 'lenis'

  const lenis = new Lenis({
    lerp: 1,
  })

  lenis.on('scroll', ScrollTrigger.update)
  gsap.ticker.add((time) => {
    lenis.raf(time * 1000)
  })

  // const lenis = {
  //   options: { lerp: 1 },
  //   scrollTo: (_, __) => {},
  // }

  const MAX_ENTROPY = 0.01
  window.entropy = 0

  document.addEventListener('DOMContentLoaded', () => {
    lenis.scrollTo(document.documentElement, {
      offset: 0,
      immediate: true,
    })
  })

  gsap.registerPlugin(ScrollTrigger)

  // Only start building scroll listeners when the THREE World is ready
  document.addEventListener('world-ready', () => {
    // Swap model function
    function swapModel(targetId: string | number) {
      const swapModelEvent = new CustomEvent('swap-target', {
        detail: {
          targetId: typeof targetId === 'string' ? parseInt(targetId) : targetId,
        },
      })
      document.dispatchEvent(swapModelEvent)
    }

    // Elements
    const introductionSections = document.querySelectorAll('.introduction-dummy')
    const entropyEl: HTMLElement = document.querySelector('.introduction-entropy')
    const contentScrollEl: HTMLElement = document.querySelector('.content-wrapper')
    const devPreviewEl: HTMLElement = document.querySelector('.introduction-development-previews')
    const generalEl: HTMLElement = document.querySelector('.introduction-general')
    const devEl: HTMLElement = document.querySelector('.introduction-development')

    if (!contentScrollEl) return

    // Inline Elements per section
    const generalInlines = generalEl.querySelectorAll('.inline-highlight')
    const devInlines = devEl.querySelectorAll('.inline-highlight')

    introductionSections.forEach((section: HTMLElement) => {
      ScrollTrigger.create({
        trigger: section,
        // snap: {
        //   snapTo: 0.5,
        //   duration: 0.15,
        // },
        onEnter: () => {
          lenis.scrollTo(section, {
            offset: -200,
            lerp: 1,
            lock: true,
            force: true,
            duration: 0.5,
          })
          swapModel(section.dataset.modelId)
        },
        onEnterBack: () => {
          lenis.scrollTo(section, {
            offset: 200,
            lerp: 1,
            lock: true,
            force: true,
            duration: 0.5,
          })
          swapModel(section.dataset.modelId)
        },
      })
    })

    ScrollTrigger.create({
      trigger: entropyEl,
      start: 'center center',
      end: '+=200%',
      pin: true,
      // markers: {
      //   indent: 500,
      // },
      onEnter: () => {
        lenis.options.lerp = 0.02
        // swapModel(lastIntroEl.dataset.modelId)
      },
      onEnterBack: () => {
        lenis.options.lerp = 0.03
      },
      onLeave: () => {
        lenis.options.lerp = 1
        lenis.scrollTo(devPreviewEl, {
          offset: window.innerHeight * 0.5,
          lock: true,
          force: true,
          duration: 1,
          onComplete: () => {
            window.entropy = 0
          },
        })
      },
      onLeaveBack: () => {
        lenis.options.lerp = 1
        swapModel(2)
      },
      onUpdate: (self) => {
        window.entropy = self.progress * MAX_ENTROPY
      },
    })

    // GSAP Timeline
    const scrollerTL = gsap.timeline({
      paused: true,
    })

    let isTweening = false
    let currentIndex = 0
    const tlBlocks = ['initAbout', 'aboutEntered', 'devEntered', 'tlComplete']

    // Function to handle scroll events within the pinned container to animate between blocks of content
    function handlePinContainerScroll({ progress, direction }) {
      // Check if we are animating or if we should be animating
      if (isTweening) return

      const targetIndex = currentIndex + direction

      console.log(targetIndex)

      if (targetIndex < 0 || targetIndex >= tlBlocks.length) return

      // Start the animation
      isTweening = true

      // Get the labels from the predefined label blocks array
      const fromLabel = tlBlocks[currentIndex]
      const toLabel = tlBlocks[targetIndex]

      // Set the new current index
      currentIndex = targetIndex

      // Calculate the tween duration by looking up the label time values
      const tweenDuration = Math.abs(scrollerTL.labels[toLabel] - scrollerTL.labels[fromLabel])

      const targetModelId = targetIndex + 7 //TODO: This magic number should be better fool-proofed
      if (targetModelId > 7) swapModel(targetModelId)

      // Kill previous tweens
      gsap.killTweensOf(scrollerTL)

      // Animation blocks translate to scrolling one pageheight of content
      // While the animation block is playing we want to scroll to the corresponding page position

      const lastSectionOffset = targetIndex === tlBlocks.length - 1 ? 15 : 0 // Small offset to preview the next section at the end of animation

      // Scroll to corresponding page position (and lock the scroll)
      lenis.scrollTo(devPreviewEl, {
        lerp: 1, // No slowing down to prevent triggering a new scroll animation
        offset: -window.innerHeight * (tlBlocks.length - targetIndex) + lastSectionOffset, // The corresponding position is based off next section block calculating backwards
        lock: true,
        force: true,
        duration: tweenDuration * 0.9, // Slight shorter duration to prevent triggering a new scroll animation
      })

      // Animate !
      scrollerTL.tweenFromTo(fromLabel, toLabel, {
        duration: tweenDuration,
        onStart: () => {
          if (direction < 0 && targetIndex === 0) {
            // Only when
            lenis.options.lerp = 0.03
            gsap.to(window, { entropy: MAX_ENTROPY, duration: tweenDuration + 2 })
          }
        },
        onComplete: () => {
          isTweening = false

          // Flash inline highlight
          if (toLabel === 'aboutEntered') {
            // const el: HTMLElement = generalInlines[Math.floor(Math.random() * generalInlines.length)] as HTMLElement
            generalInlines.forEach((el, i) => {
              setTimeout(() => {
                el.classList.add('animation-in')
                setTimeout(() => {
                  el.classList.add('animation-out')
                  el.classList.remove('animation-in')
                }, 350)
              }, i * 50)
            })
          }

          // Flash inline highlight
          if (toLabel === 'devEntered') {
            const el: HTMLElement = devInlines[Math.floor(Math.random() * devInlines.length)] as HTMLElement

            el.classList.add('animation-in')
            setTimeout(() => {
              el.classList.add('animation-out')
              el.classList.remove('animation-in')
            }, 350)
          }

          // Set Z indices to
          if (targetIndex > 1) {
            generalEl.style.zIndex = '1'
            devEl.style.zIndex = '2'
          } else {
            generalEl.style.zIndex = '2'
            devEl.style.zIndex = '1'
          }
        },
      })
    }

    // Define animation
    scrollerTL.addLabel('initAbout')
    scrollerTL.from('#igh', { x: 500, opacity: 0, ease: 'power1.inOut', duration: 0.8 })
    scrollerTL.from('#igt1', { x: 500, opacity: 0, ease: 'power1.inOut', duration: 0.8 }, 'initAbout+=0.2')
    scrollerTL.from('#igt2', { x: 500, opacity: 0, ease: 'power1.inOut', duration: 0.7 }, 'initAbout+=0.4')

    scrollerTL.addLabel('aboutEntered')

    scrollerTL.to('#igh', { x: 500, opacity: 0, ease: 'power1.inOut', duration: 0.8 })
    scrollerTL.to('#igt1', { x: 500, opacity: 0, ease: 'power1.inOut', duration: 0.8 }, 'aboutEntered+=0.2')
    scrollerTL.to('#igt2', { x: 500, opacity: 0, ease: 'power1.inOut', duration: 0.7 }, 'aboutEntered+=0.4')

    scrollerTL.addLabel('queueDevelopment')

    scrollerTL.from('#idh', { y: -500, opacity: 0, ease: 'power1.inOut', duration: 0.8 }, 'queueDevelopment-=1')
    scrollerTL.from('#idt1', { x: -500, opacity: 0, ease: 'power1.inOut', duration: 0.8 }, 'queueDevelopment-=0.8')
    scrollerTL.from('#idt2', { x: -500, opacity: 0, ease: 'power1.inOut', duration: 0.7 }, 'queueDevelopment-=0.6')

    scrollerTL.addLabel('devEntered')

    scrollerTL.to('#idh', { y: -500, opacity: 0, ease: 'power1.inOut', duration: 0.8 })
    scrollerTL.to('#idt2', { x: -500, opacity: 0, ease: 'power1.inOut', duration: 0.8 }, 'devEntered+=0.2')
    scrollerTL.to('#idt1', { x: -500, opacity: 0, ease: 'power1.inOut', duration: 0.7 }, 'devEntered+=0.4')

    scrollerTL.addLabel('tlComplete')

    // Pinned container for introduction and development (TODO: New Media in same container and project previews all mixed?)
    ScrollTrigger.create({
      trigger: contentScrollEl,
      start: 'center center',
      end: '+=300%',
      pin: true,
      scrub: true,
      onEnter: () => {
        lenis.options.lerp = 1
        window.entropy = 0
        // currentIndex = 0
      },
      onLeaveBack: () => {
        console.log('leave back pin element')
        currentIndex = 0
        lenis.scrollTo(entropyEl, {
          offset: -window.innerHeight * 0.5,
          lerp: 0.03,
          force: true,
          lock: true,
          duration: 2,
        })
      },
      onEnterBack: () => {
        lenis.options.lerp = 1
      },
      onLeave: () => {
        lenis.options.lerp = 0.3
        currentIndex = tlBlocks.length - 1
      },
      onUpdate: (self) => {
        handlePinContainerScroll({ ...self })
      },
    })
  })
</script>

<style lang="scss" is:global>
  .introduction-general {
    z-index: 2;
  }

  .wave-y-1 {
    display: inline-block;
    animation: 8s infinite alternate ease-in-out wave-x;
  }

  .wave-y-2 {
    display: inline-block;
    animation: 7s infinite alternate-reverse ease-in-out wave-x;
    animation-delay: 0.33s;
  }

  @keyframes wave-l {
    from {
      margin-left: -16px;
    }

    to {
      margin-left: 16px;
    }
  }

  @keyframes wave-r {
    from {
      margin-right: -16px;
    }

    to {
      margin-right: 16px;
    }
  }

  @keyframes wave-x {
    from {
      transform: translateX(-16px);
      /* margin-top: -16px; */
    }

    to {
      /* margin-top: 16px; */
      transform: translateX(16px);
    }
  }

  @keyframes wave-y {
    from {
      transform: translateY(-16px);
      /* margin-top: -16px; */
    }

    to {
      /* margin-top: 16px; */
      transform: translateY(16px);
    }
  }
</style>
