---
import ScrollIcon from '@/components/ScrollIcon.astro'
import Three from '../components/Three.astro'
import Layout from '../layouts/Layout.astro'
import TechStackIcons from '@/components/TechStackIcons.astro'
import GridContent from '@/components/GridContent.astro'
import Section from '@/components/Section.astro'
import ContentHeader from '@/components/ContentHeader.astro'
import ContentParagraph from '@/components/ContentParagraph.astro'
import ProjectsPreview from '@/components/ProjectsPreview.astro'

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout>
  <Three />

  <ScrollIcon />

  <Section className="introduction-dummy" data-model-id="0">
    <GridContent className="h-screen" variant="full" />
  </Section>
  <Section className="introduction-dummy" data-model-id="1">
    <GridContent className="h-screen" variant="full" />
  </Section>
  <Section className="introduction-dummy" data-model-id="2">
    <GridContent className="h-screen" variant="full" />
  </Section>
  <Section className="introduction-dummy" data-model-id="3">
    <GridContent className="h-screen" variant="full" />
  </Section>
  <Section className="introduction-dummy" data-model-id="4">
    <GridContent className="h-screen" variant="full" />
  </Section>
  <Section className="introduction-dummy" data-model-id="5">
    <GridContent className="h-screen" variant="full" />
  </Section>
  <Section className="introduction-dummy" data-model-id="6">
    <GridContent className="h-screen" variant="full" />
  </Section>
  <Section className="introduction-dummy-last" data-model-id="7">
    <GridContent className="h-screen" variant="full" />
  </Section>

  <div class="content-wrapper relative">
    <Section className="introduction-general absolute inset-0 w-full h-full" data-model-id="8">
      <GridContent className="h-screen" variant="b">
        <h1 id="igh">About me</h1>
        <p id="igt">
          I'm passionate about technology—I love to create. Storytelling, emotion, mystery: these are the words that
          shape my approach to creativity and art. I work with both code and sound, exploring the space where audio
          synthesis and generative visuals meet. I'm deeply inspired by the natural world—its patterns, rhythms, and
          quiet complexity often find their way into my work. Through immersive digital experiences and ambient
          compositions, I aim to evoke feeling, spark curiosity, and invite a moment of reflection.
        </p>
      </GridContent>
    </Section>
  </div>

  <Section className="introduction-development" data-model-id="9">
    <GridContent className="h-screen" variant="a">
      <h1 id="idh">Web Development</h1>
      <p id="idt">
        I'm a skilled front-end developer with a strong focus on immersive, interactive web experiences. I specialize in
        crafting visually engaging interfaces using modern tools and frameworks, often blending animation, WebGL, and
        responsive design to create websites that feel alive and intuitive. I enjoy pushing the boundaries of what’s
        possible in the browser—turning ideas into experiences that are both functional and emotionally resonant.
      </p>
      <!-- <h2>Tech Stack</h2> -->
      <TechStackIcons />
    </GridContent>
    <GridContent variant="full">
      <ProjectsPreview
        projects={[
          { href: '/', image: { src: 'https://picsum.photos/400?random=1', alt: 'picture alt' } },
          { href: '/', image: { src: 'https://picsum.photos/400?random=2', alt: 'picture alt' } },
          { href: '/', image: { src: 'https://picsum.photos/400?random=3', alt: 'picture alt' } },
        ]}
      />
    </GridContent>
  </Section>

  <Section className="introduction-new-media" data-model-id="10">
    <GridContent className="h-screen" variant="b">
      <h1>New Media & Immersive Installations</h1>
      <p>
        I’m fascinated by the potential of immersive environments to blur the lines between the digital and physical.
        Using tools like TouchDesigner, it's possible to create responsive systems that connect light, sound, and
        movement—turning spaces into living, reactive experiences. These formats offer a unique way to tell stories,
        provoke emotion, and engage the senses beyond the screen.
      </p>
    </GridContent>
  </Section>
</Layout>

<!-- <div class="loading"></div> -->

<script>
  import gsap from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'
  import { lerp } from 'three/src/math/MathUtils.js'
  // import { ScrollTrigger } from 'gsap/all'
  let isScrolling = false
  let scrollTimeout: any = null

  gsap.registerPlugin(ScrollTrigger)

  // Only start building scroll listeners when the THREE World is ready
  document.addEventListener('world-ready', () => {
    const introductionSections = document.querySelectorAll('.introduction-dummy')

    introductionSections.forEach((section: HTMLElement) => {
      ScrollTrigger.create({
        trigger: section,
        markers: {
          indent: 100,
        },
        snap: 0.5,
        onEnter: () => {
          console.log('onEnter introduction slide')
          const id = section.dataset.modelId
          // create custom events
          const swapModelEvent = new CustomEvent('swap-target', {
            detail: {
              targetId: parseInt(id),
            },
          })
          // dispatch the events
          document.dispatchEvent(swapModelEvent)
        },
        onEnterBack: () => {
          console.log('onEnter BACK introduction slide')

          // create custom events
          const id = section.dataset.modelId
          const swapModelEvent = new CustomEvent('swap-target', {
            detail: {
              targetId: parseInt(id),
            },
          })
          // dispatch the events
          document.dispatchEvent(swapModelEvent)
        },
      })
    })

    // Last introduction slide
    const lastIntroEl: HTMLElement = document.querySelector('.introduction-dummy-last')
    ScrollTrigger.create({
      trigger: lastIntroEl,
      // snap: 0.5,
      onEnter: () => {
        console.log('onEnter LAST introduction slide')
        // create custom events
        const id = lastIntroEl.dataset.modelId
        const swapModelEvent = new CustomEvent('swap-target', {
          detail: {
            targetId: parseInt(id),
          },
        })

        document.dispatchEvent(swapModelEvent)
      },
      onEnterBack: () => {
        console.log('onEnterBack LAST introduction slide')

        // Stop the scrolling
        window.lenis.stop()
        // Change background model
        const id = lastIntroEl.dataset.modelId
        const swapModelEvent = new CustomEvent('swap-target', {
          detail: {
            targetId: parseInt(id),
          },
        })
        document.dispatchEvent(swapModelEvent)

        // Reverse the timeline
        aboutTL.reverse()

        // Scroll to the middle of the container after the timeline is complete
        // Seems to work better with a timeout rather than onReverseComplete of gsap's timeline
        setTimeout(() => {
          window.lenis.scrollTo(lastIntroEl, {
            offset: 0,
            // lock: true,
            // duration: 0.5,
            immediate: true,
            onComplete: (self) => {
              self.options.lerp = 1
              self.start()
            },
          })
        }, 1500)
      },
    })

    // About slide logic
    const aboutWrapper: HTMLElement = document.querySelector('.introduction-general')

    // Create timeline, paused by default
    const aboutTL = gsap.timeline({
      paused: true,
      onStart: () => {
        window.lenis.stop()
      },
      onComplete: () => {
        window.lenis.start()
      },
      onReverseComplete: () => {
        aboutTL.pause()
        window.lenis.start()
      },
    })

    // Define animation
    aboutTL.fromTo(
      '#igh',
      { x: 1000 },
      {
        x: 0,
        duration: 0.75,
      }
    )
    aboutTL.fromTo(
      '#igt',
      { x: 1000 },
      {
        x: 0,
        duration: 0.75,
      },
      '<0.4'
    )

    // Manual ScrollTrigger to detect entry, but NOT tied to tl
    ScrollTrigger.create({
      trigger: aboutWrapper,
      onEnter: () => {
        console.log('entered FIRST content')

        // Dispatch custom event
        const id = aboutWrapper.dataset.modelId
        const swapModelEvent = new CustomEvent('swap-target', {
          detail: {
            targetId: parseInt(id),
          },
        })
        document.dispatchEvent(swapModelEvent)

        // Lenis scroll and timeline resume after scroll completes
        window.lenis.scrollTo(aboutWrapper, {
          offset: 0,
          force: true,
          lock: true,
          duration: 0.5,
          onStart: () => {
            console.log('started scrollTo')
          },
          onComplete: (self) => {
            console.log('completed scrollTo')
            self.options.lerp = 0.1
            aboutTL.progress(0)
            aboutTL.play()
          },
        })
      },
    })

    // Dev content logic
    const devWrapper: HTMLElement = document.querySelector('.introduction-development')

    // Create timeline, paused by default
    const devTL = gsap.timeline({
      paused: true,
      onStart: () => {
        window.lenis.stop()
      },
      onComplete: () => {
        window.lenis.start()
      },
      onReverseComplete: () => {
        devTL.pause()
        window.lenis.start()
      },
    })

    devTL.fromTo('#idh', { x: -1000 }, { x: 0, duration: 0.75 })
    devTL.fromTo('#idt', { x: -1000 }, { x: 0, duration: 0.75 }, '<0.4')

    ScrollTrigger.create({
      trigger: devWrapper,
      onEnter: () => {
        console.log('entered DEV content')

        aboutTL.reverse()

        // Dispatch custom event
        const id = devWrapper.dataset.modelId
        const swapModelEvent = new CustomEvent('swap-target', {
          detail: {
            targetId: parseInt(id),
          },
        })
        document.dispatchEvent(swapModelEvent)

        // Lenis scroll and timeline resume after scroll completes
        window.lenis.scrollTo(devWrapper, {
          offset: 0,
          force: true,
          lock: true,
          immediate: true,
          onComplete: (self) => {
            devTL.progress(0)
            devTL.play()
          },
        })
      },
    })
  })
</script>
