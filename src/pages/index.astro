---
// Components
import ScrollIcon from '@/components/ScrollIcon.astro'
import Three from '../components/Three.astro'
import Layout from '../layouts/Layout.astro'
import ExperienceLoader from '@/components/ExperienceLoader.astro'
import InlineHighlight from '@/components/InlineHighlight.astro'
import SlicedLetter from '@/components/SlicedLetter.astro'
import Timeline from '@/components/Timeline.astro'
import ProjectsPreview from '@/components/ProjectsPreview.astro'
import Contact from '@/components/Contact.astro'
import ContentBlock from '@/components/ContentBlock.astro'

// Assets
import jcbImage from '@/assets/images/projects/americana/americana_01.jpg'
import depthArrayImage from '@/assets/images/projects/depth-array/DDW_01.jpg'
import delverImage from '@/assets/images/projects/delver/DELVER.png'

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout>
  <ExperienceLoader />
  <Three />

  <section class="introduction-dummy relative z-10 h-screen w-screen" data-model-id="0"></section>
  <section class="introduction-dummy relative z-10 h-screen w-screen" data-model-id="1"></section>
  <section class="introduction-dummy relative z-10 h-screen w-screen" data-model-id="2"></section>

  <section class="introduction-entropy relative z-10 h-screen w-screen"></section>

  <section
    id="about"
    class="introduction-general flex items-center relative z-10 h-fit max-sm:h-[100dvh] md:max-lg:h-[70dvh] lg:h-[70dvh] lg:w-screen my-16 md:my-24 lg:my-32 xl:my-64"
    data-model-id="3"
  >
    <div class="main-grid-layout h-fit">
      <h1
        id="igh"
        class="text-heading-1 col-start-1 col-span-4 md:col-start-4 md:col-span-3 max-lg:px-4 lg:col-start-7 lg:col-span-5 lg:pr-12 2xl:col-start-8 3xl:col-start-9 3xl:col-span-5 2xl:pr-0"
      >
        <span>AB<SlicedLetter className="wave-y-2 mx-4 text-salmon">O</SlicedLetter>UT</span>
      </h1>

      <p
        id="igt1"
        class="text-paragraph col-start-1 col-span-4 md:col-start-3 md:col-span-4 max-lg:px-4 lg:col-start-7 lg:col-span-6 lg:pr-12 2xl:col-start-8 3xl:col-start-9 3xl:col-span-5 2xl:pr-0"
      >
        I'm passionate about technology,<InlineHighlight className="mx-6 lg:mx-12 font-semibold" color="white"
          >I love to create.</InlineHighlight
        >Storytelling, emotion, mystery: these are the words that shape my approach to creativity and art. I work with
        both<InlineHighlight className="mx-6 lg:mx-12 font-semibold" color="white">code and sound</InlineHighlight>as
        means to translate my vision to the world.
      </p>
      <p
        id="igt2"
        class="text-paragraph col-start-1 col-span-4 md:col-start-3 md:col-span-4 md:text-end max-lg:px-4 lg:col-start-8 lg:col-span-5 lg:pr-12 2xl:col-start-9 3xl:col-start-10 3xl:col-span-5 2xl:pr-0"
      >
        Inspired by the natural world, its patterns, rhythms and quiet complexity often find their way into my work.<br
        />Through immersion and art I aim to evoke feeling,<InlineHighlight
          className="font-semibold mx-6 lg:mx-12"
          color="white">spark curiosity</InlineHighlight
        > and invite a moment of reflection.
      </p>
    </div>
  </section>

  <section
    class="introduction-development flex items-center relative z-10 max-sm:h-[100dvh] md:max-lg:h-[70dvh] lg:h-[70dvh] lg:w-screen my-16 md:my-24 lg:my-32 xl:my-64"
    data-model-id="4"
  >
    <div class="main-grid-layout h-fit">
      <h1
        id="idh"
        class="text-heading-1 md:text-end col-start-1 col-span-4 md:col-start-1 md:col-span-3 max-lg:px-4 lg:col-start-1 lg:col-span-6 lg:pl-12 2xl:col-start-2 3xl:col-start-4 3xl:col-span-5 2xl:pl-0"
      >
        CO<SlicedLetter className="mx-4 wave-y-1 text-salmon">D</SlicedLetter>ING
      </h1>

      <p
        id="idt1"
        class="text-paragraph md:text-end col-start-1 col-span-4 md:col-start-1 max-lg:px-4 lg:col-start-1 lg:col-span-6 lg:pl-12 2xl:col-start-2 3xl:col-start-4 3xl:col-span-5 2xl:pl-0"
      >
        I'm a developer with a focus on building <InlineHighlight className="mx-6 font-semibold lg:mx-12" color="white"
          >interactive and engaging</InlineHighlight
        > digital experiences. My work ranges from web development to creative coding for installations and art.
      </p>

      <p
        id="idt2"
        class="text-paragraph col-start-1 col-span-4 md:col-start-1 max-lg:px-4 lg:col-start-1 lg:col-span-5 lg:pl-12 2xl:col-start-2 3xl:col-start-3 3xl:col-span-5 2xl:pl-0"
      >
        I use modern tools and frameworks to <InlineHighlight className="font-semibold mx-6 lg:mx-12" color="white"
          >bring ideas to life.</InlineHighlight
        > Whether it's a responsive website, visual experiment or immersive piece, I enjoy exploring the intersection of
        code, design, and user experience.
      </p>
    </div>
  </section>

  <section
    id="sound"
    class="introduction-sound flex items-center relative z-10 h-fit max-sm:h-[100dvh] md:max-lg:h-[70dvh] lg:w-screen lg:h-[70dvh] my-16 md:my-24 lg:my-32 xl:my-64"
    data-model-id="5"
  >
    <div class="main-grid-layout h-fit">
      <h1
        id="ish"
        class="text-heading-1 col-start-1 col-span-4 md:col-start-4 md:col-span-3 max-lg:px-4 lg:col-start-7 lg:col-span-5 lg:pr-12 2xl:col-start-8 3xl:col-start-9 3xl:col-span-5 2xl:pr-0"
      >
        <span>SO<SlicedLetter className="wave-y-2 mx-4 text-salmon">U</SlicedLetter>ND</span>
      </h1>

      <p
        id="ist1"
        class="text-paragraph col-start-1 col-span-4 md:col-start-3 md:col-span-4 max-lg:px-4 lg:col-start-7 lg:col-span-6 lg:pr-12 2xl:col-start-8 3xl:col-start-9 3xl:col-span-5 2xl:pr-0"
      >
        I'm passionate about technology,<InlineHighlight className="mx-6 lg:mx-12 font-semibold" color="white"
          >I love to create.</InlineHighlight
        >Storytelling, emotion, mystery: these are the words that shape my approach to creativity and art. I work with
        both<InlineHighlight className="mx-6 lg:mx-12 font-semibold" color="white">code and sound</InlineHighlight>as
        means to translate my vision to the world.
      </p>
      <p
        id="ist2"
        class="text-paragraph col-start-1 col-span-4 md:col-start-3 md:col-span-4 md:text-end max-lg:px-4 lg:col-start-8 lg:col-span-5 lg:pr-12 2xl:col-start-9 3xl:col-start-10 3xl:col-span-5 2xl:pr-0"
      >
        Inspired by the natural world, its patterns, rhythms and quiet complexity often find their way into my work.<br
        />Through immersion and art I aim to evoke feeling,<InlineHighlight
          className="font-semibold mx-6 lg:mx-12"
          color="white">spark curiosity</InlineHighlight
        > and invite a moment of reflection.
      </p>
    </div>
  </section>

  <section id="projects" class="relative z-10" data-model-id="6">
    <!-- <ContentBlock class="my-0!">
      <h1 class="text-heading-1">PRO<SlicedLetter className="text-salmon mx-4 wave-y-2">J</SlicedLetter>ECTS</h1>
    </ContentBlock> -->
    <ProjectsPreview
      class="lg:col-start-2 lg:col-span-10 px-4 lg:px-12"
      projects={[
        {
          href: '/projects/depth-array-reflections',
          title: 'Depth Array: Reflections',
          tags: ['Immersive', 'Sound Design', 'Creative Coding'],
          image: { src: depthArrayImage, alt: 'picture alt' },
        },
        {
          href: '/projects/americana',
          title: 'Americana',
          tags: ['Development', 'Cultural Heritage'],
          image: { src: jcbImage, alt: 'picture alt' },
        },
        {
          href: '/projects/delver-music',
          title: 'Delver Music',
          tags: ['Design', 'Development', 'Music'],
          image: { src: delverImage, alt: 'picture alt' },
        },
      ]}
    />
  </section>

  <section class="introduction-xp relative z-10" data-model-id="7">
    <ContentBlock class="mt-16 mb-8 md:mt-24 lg:my-32">
      <h1 class="text-heading-1">
        EXP<SlicedLetter className="mx-4 wave-y-1 text-salmon">E</SlicedLetter>RIENCE
      </h1>
      <p class="text-paragraph">
        A selection of past and current roles that outline my professional experience and areas of focus.
      </p>
    </ContentBlock>

    <Timeline
      items={[
        {
          dateFrom: '2024',
          dateTo: 'Current',
          title: 'Freelance',
          subtitle: 'Creative Developer - Sound Designer - Immersive Artist',
          description:
            "As of last year I've shifted my focus to freelance work, through which I wish to further explore my passion for immersive experiences with a focus on front-end development, storytelling, creative coding, sound design and new media.",
        },
        {
          dateFrom: '2021',
          dateTo: '2024',
          title: 'Fabrique',
          subtitle: 'Frontend Developer',
          tags: ['React', 'Vanilla JS', 'TypeScript', 'NextJS', 'GSAP', 'Tailwind CSS', 'Django', 'Wagtail'],

          description:
            'For each project at Fabrique, a small team of talented individuals collaborates to create unique digital experiences. As a frontend developer, I worked closely with project lead, designers and backend developers to build responsive, accessible and performant websites and applications.<br /><br />My role involved choosing the right technology for the job, implementing designs, optimizing performance and ensuring the best user experience.<br /><br />Short communication lines with the team and clients allowed us to quickly iterate and adapt to changing requirements, resulting in high-quality products that meet the needs of our clients and their users.',
        },
        {
          dateFrom: '2020',
          dateTo: '2021',
          title: 'Thuisleefgroep',
          subtitle: 'Frontend Developer',
          tags: ['React', 'TypeScript', 'Storybook'],
          description:
            'At Thuisleefgroep, our development team was creating applications for healthcare professionals and internal administration tools.<br /><br />As front-end developer I was responsible for the continuous development of these applications, coaching junior developers, as well as contributing to and maintaining the in-house React component library which is used across all applications.',
        },
        {
          dateFrom: '2018',
          dateTo: '2020',
          title: 'Vattenfall',
          subtitle: 'Frontend Developer',
          tags: ['Angular', 'TypeScript', 'Azure DevOps'],
          description:
            "At Vattenfall, I worked as part of the scrum team responsible for transforming the Nuon brand to Vattenfall.<br /><br />This involved collaborating with front- and backend developers, designers and stakeholders to create a cohesive visual identity and smooth user experience for the brand's customers.<br /><br />Parallel to the visual rebranding, I worked on migrating the existing AngularJS codebase to Angular 2+.",
        },
      ]}
    />
  </section>

  <Contact
    data-model-id="8"
    id="contact"
    class="introduction-contact h-screen w-screen relative z-10 my-0! flex flex-col justify-end"
    textContainerClass="relative bottom-[10%] lg:bottom-[15%] xl:bottom-[15%]"
    hideTitle
  />

  <ScrollIcon />
</Layout>

<script>
  import { isMaxMD } from '@/scripts/utils/breakpoints'
  import { getCenterScrollPosition } from '@/scripts/utils/device'
  import { easeInOutQuad } from '@/scripts/utils/easings'
  import Lenis from 'lenis'
  import gsap from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'
  import { map, triangleRamp, ramp } from '@/scripts/utils/math'

  // document.addEventListener('DOMContentLoaded', () => {
  //   const event = new Event('world-ready')
  //   document.dispatchEvent(event)
  // })

  // Constants
  const MAX_ENTROPY = 0.01
  const SCROLL_LERP_SLOWER = 0.08
  const SCROLL_LERP_FASTER = 0.15
  window.entropy = 0
  window.waveform = 0
  window.codingMult = 1

  // ScrollTrigger.config({
  //   ignoreMobileResize: true,
  // })

  gsap.registerPlugin(ScrollTrigger)
  const lenis = new Lenis({
    autoRaf: false,
    lerp: SCROLL_LERP_FASTER,
    wheelMultiplier: 0.5,
    touchMultiplier: 0.75,
    touchInertiaMultiplier: 20,
    syncTouch: true,
    syncTouchLerp: 0.05,
  })

  let currentScrollVel = 0
  lenis.on('scroll', (e) => {
    currentScrollVel = Math.abs(e.velocity)
    ScrollTrigger.update()
  })

  gsap.ticker.add((time) => {
    lenis.raf(time * 1000)
  })

  // NavLink anchor smooth scroll
  let isScrollingToAnchor = false
  let isScrollToSectionDisabled = false

  // Only start building scroll listeners when the THREE World is ready
  document.addEventListener('world-ready', () => {
    // Elements
    const introductionSections = document.querySelectorAll('.introduction-dummy')
    const entropyEl: HTMLElement = document.querySelector('.introduction-entropy')
    const generalEl: HTMLElement = document.querySelector('.introduction-general')
    const devEl: HTMLElement = document.querySelector('.introduction-development')
    const soundEl: HTMLElement = document.querySelector('.introduction-sound')
    const projectsEl: HTMLElement = document.querySelector('#projects')
    const xpEl: HTMLElement = document.querySelector('.introduction-xp')

    //
    // Swap model function
    function swapModel(targetId: string | number) {
      const swapModelEvent = new CustomEvent('swap-target', {
        detail: {
          targetId: typeof targetId === 'string' ? parseInt(targetId) : targetId,
        },
      })
      document.dispatchEvent(swapModelEvent)
    }

    //
    // Add Anchor link listeners
    document.querySelectorAll('.nav-link').forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault()
        const href = link.getAttribute('href')
        if (href && href.startsWith('#')) {
          let target: HTMLElement | null = document.querySelector(href)

          if (target) {
            isScrollingToAnchor = true
            lenis.scrollTo(href === '#about' ? getCenterScrollPosition(target) : target, {
              offset: href === '#contact' ? 500 : 0,
              duration: 2,
              lock: true,
              onComplete: () => (isScrollingToAnchor = false),
            })
          }
        } else if (href) {
          window.location.href = href
        }
      })
    })

    // Scroll function to center section in viewport
    const scrollToIntroSection = (section: HTMLElement) => {
      if (isScrollingToAnchor || isMaxMD()) return
      // lenis.stop()
      // lenis.start()
      lenis.scrollTo(getCenterScrollPosition(section), {
        duration: 1.25,
        lerp: SCROLL_LERP_SLOWER,
        lock: currentScrollVel < 15,
        easing: easeInOutQuad,
      })
    }

    // Intro slide scrolltriggers for each THREE.JS word
    // ScrollTrigger scrolls the page to the center of the section when entering it and swaps the model
    introductionSections.forEach((section: HTMLElement, index: number) => {
      ScrollTrigger.create({
        trigger: section,
        start: 'top bottom-=10%',
        end: 'bottom top+=10%',
        onEnter: () => {
          if (index === 0) return
          scrollToIntroSection(section)
          swapModel(section.dataset.modelId)
        },

        onEnterBack: () => {
          scrollToIntroSection(section)
          swapModel(section.dataset.modelId)
        },
      })
      // ScrollTrigger.create({
      //   trigger: section,
      //   start: 'center center',
      //   end: 'center center',
      //   onEnter: () => {
      //     if (index === 0) return
      //     scrollToIntroSection(section)
      //     swapModel(section.dataset.modelId)
      //   },

      //   onEnterBack: () => {
      //     scrollToIntroSection(section)
      //     swapModel(section.dataset.modelId)
      //   },
      // })
    })

    const scrollToEntropy = () => {
      if (isScrollToSectionDisabled) return
      if (isScrollingToAnchor || isMaxMD()) return
      // lenis.stop()
      // lenis.start()
      lenis.scrollTo(getCenterScrollPosition(entropyEl), {
        duration: 1.5,
        lock: currentScrollVel < 15,
        easing: easeInOutQuad,
      })
    }

    //
    // ScrollTrigger for the entropy section
    ScrollTrigger.create({
      trigger: entropyEl,
      start: 'top bottom-=10%',
      end: '+=190%',
      pin: true,
      onEnter: () => {
        scrollToEntropy()
      },
      onEnterBack: () => {
        swapModel(introductionSections.length - 1)
      },
      onLeaveBack: () => {
        if (isScrollingToAnchor) return
        scrollToIntroSection(introductionSections[introductionSections.length - 1] as HTMLElement)
        swapModel(introductionSections.length - 1)
      },
      onUpdate: (self) => {
        if (self.progress > 0.5) {
          // slow down lerp when more than halfway through the section
          lenis.options.lerp = map(self.progress, 0.5, 1, 0.15, 0.08)
          // const rampedWaveformVal = map(self.progress, 0.5, 1, 0, 1)
          // window.waveform = ramp(rampedWaveformVal) * 0.1
        }

        // Increase entropy based on scroll progress
        window.entropy = self.progress * MAX_ENTROPY
      },
    })

    //
    // Scroll icon fade animation
    gsap.to('.scroll-icon-container', {
      opacity: 0,
      scrollTrigger: {
        trigger: generalEl,
        start: 'top bottom',
        end: '+=25%',
        scrub: true,
      },
    })

    //
    // Animations for entering the general section

    //Scroll functions for the general section
    const scrollToGeneral = () => {
      if (isScrollToSectionDisabled) return
      if (isScrollingToAnchor || isMaxMD()) return
      // lenis.stop()
      // lenis.start()
      lenis.scrollTo(getCenterScrollPosition(generalEl), {
        duration: map(currentScrollVel, 0, 20, 1, 0.6),
        lerp: SCROLL_LERP_SLOWER,
        lock: currentScrollVel < 25,
        easing: easeInOutQuad,
      })
    }
    const generalTL = gsap.timeline({
      onStart: scrollToGeneral,
      scrollTrigger: {
        trigger: generalEl,
        start: 'center bottom',
        end: 'center center',
        scrub: true,
      },
    })
    generalTL.fromTo('#igh', { y: 0, opacity: 0 }, { y: 0, opacity: 1, duration: 3, ease: 'none' })
    generalTL.fromTo('#igt1', { x: -150, opacity: 0 }, { x: 0, opacity: 1, duration: 3, ease: 'none' }, '-=1')
    generalTL.fromTo('#igt2', { x: 150, opacity: 0 }, { x: 0, opacity: 1, duration: 3, ease: 'none' })

    //
    // Animations for leaving the general section
    const generalOutTL = gsap.timeline({
      scrollTrigger: {
        trigger: generalEl,
        start: 'top top+=20%',
        end: 'bottom top',
        scrub: true,
      },
    })
    generalOutTL.addLabel('animationStart')
    generalOutTL.fromTo('#igh', { y: 0 }, { y: -180, duration: 4, ease: 'none' }, 'animationStart')
    generalOutTL.fromTo('#igt1', { y: 0 }, { y: -150, duration: 4, ease: 'none' }, 'animationStart+=0.33')
    generalOutTL.fromTo('#igt2', { y: 0 }, { y: -120, duration: 4, ease: 'none' }, 'animationStart+=0.66')

    //
    // ScrollTrigger for the general section
    // Extra mapping to adjust start position based on breakpoint
    const startMap = {
      xs: 'top center',
      sm: 'top center',
      md: 'top bottom-=25%',
      lg: 'top center',
      xl: 'top center',
      xxl: 'top center',
      xxxl: 'top center',
    }

    ScrollTrigger.create({
      trigger: generalEl,
      start: 'top center',
      end: 'bottom center',
      onEnter: () => {
        window.entropy = 0
        swapModel(generalEl.dataset.modelId)
      },
      onEnterBack: () => {
        swapModel(generalEl.dataset.modelId)
      },
      onLeaveBack: () => {
        scrollToEntropy()
        window.entropy = 1
        swapModel(introductionSections.length - 1)
      },
    })

    //
    // Animations for entering the development section
    const scrollToDev = () => {
      if (isScrollToSectionDisabled) return

      if (isScrollingToAnchor || isMaxMD()) return
      // lenis.stop()
      // lenis.start()
      lenis.scrollTo(getCenterScrollPosition(devEl), {
        duration: map(currentScrollVel, 0, 20, 1, 0.6),
        lerp: SCROLL_LERP_SLOWER,
        lock: currentScrollVel < 25,
        easing: easeInOutQuad,
      })
    }
    const devTL = gsap.timeline({
      onStart: scrollToDev,
      scrollTrigger: {
        trigger: devEl,
        start: 'top bottom-=25%',
        end: 'top center',
        scrub: true,
      },
    })
    devTL.addLabel('animationStart')
    devTL.fromTo('#idt1', { x: 150, opacity: 0 }, { x: 0, opacity: 1, duration: 3, ease: 'none' })
    devTL.fromTo('#idh', { y: 0, opacity: 0 }, { y: 0, opacity: 1, duration: 3, ease: 'none' })
    devTL.fromTo('#idt2', { x: -150, opacity: 0 }, { x: 0, opacity: 1, duration: 3, ease: 'none' })

    //
    // Animations for leaving the development section
    const devOutTL = gsap.timeline({
      scrollTrigger: {
        trigger: devEl,
        start: 'top top+=20%',
        end: 'bottom top',
        scrub: true,
      },
    })
    devOutTL.addLabel('animationStart')
    devOutTL.fromTo('#idh', { y: 0 }, { y: -180, duration: 4, ease: 'none' }, 'animationStart')
    devOutTL.fromTo('#idt1', { y: 0 }, { y: -150, duration: 4, ease: 'none' }, 'animationStart+=0.33')
    devOutTL.fromTo('#idt2', { y: 0 }, { y: -120, duration: 4, ease: 'none' }, 'animationStart+=0.66')

    //
    // ScrollTrigger for the development section
    ScrollTrigger.create({
      trigger: devEl,
      start: 'top center+=15%',
      end: 'bottom center',
      onEnter: () => {
        swapModel(devEl.dataset.modelId)
        window.codingMult = 0
      },
      onEnterBack: () => {
        swapModel(devEl.dataset.modelId)
        window.codingMult = 0
      },
      onLeave: () => {
        window.codingMult = 1
      },
      onLeaveBack: () => {
        scrollToGeneral()
        window.codingMult = 1
        swapModel(parseInt(devEl.dataset.modelId) - 1)
      },
    })

    //
    // Animations for entering the sound section
    const scrollToSound = () => {
      if (isScrollToSectionDisabled) return

      if (isScrollingToAnchor || isMaxMD()) return
      // lenis.stop()
      // lenis.start()
      lenis.scrollTo(getCenterScrollPosition(soundEl), {
        duration: map(currentScrollVel, 0, 20, 1, 0.6),
        lerp: SCROLL_LERP_SLOWER,
        lock: currentScrollVel < 25,
        easing: easeInOutQuad,
      })
    }

    // Sound section animation timeline
    const soundTL = gsap.timeline({
      onStart: scrollToSound,
      scrollTrigger: {
        trigger: soundEl,
        start: 'top bottom-=25%',
        end: 'top center',
        scrub: true,
      },
    })
    soundTL.addLabel('animationStart')
    soundTL.fromTo('#ish', { y: 0, opacity: 0 }, { y: 0, opacity: 1, duration: 3, ease: 'none' })
    soundTL.fromTo('#ist1', { x: 150, opacity: 0 }, { x: 0, opacity: 1, duration: 3, ease: 'none' })
    soundTL.fromTo('#ist2', { x: -150, opacity: 0 }, { x: 0, opacity: 1, duration: 3, ease: 'none' })

    //
    // Animations for leaving the sound section
    const soundOutTL = gsap.timeline({
      scrollTrigger: {
        trigger: soundEl,
        start: 'top top+=20%',
        end: 'bottom top',
        scrub: true,
      },
    })
    soundOutTL.addLabel('animationStart')
    soundOutTL.fromTo('#ish', { y: 0 }, { y: -180, duration: 4, ease: 'none' }, 'animationStart')
    soundOutTL.fromTo('#ist1', { y: 0 }, { y: -150, duration: 4, ease: 'none' }, 'animationStart+=0.33')
    soundOutTL.fromTo('#ist2', { y: 0 }, { y: -120, duration: 4, ease: 'none' }, 'animationStart+=0.66')

    //
    // ScrollTrigger for the sound section
    ScrollTrigger.create({
      trigger: soundEl,
      start: 'top center+=15%',
      end: 'bottom center',
      onEnter: () => {
        swapModel(soundEl.dataset.modelId)
        window.waveform = 1
      },
      onLeave: () => {},
      onLeaveBack: () => {
        scrollToDev()
        swapModel(parseInt(soundEl.dataset.modelId) - 1)
      },
      onEnterBack: () => {
        swapModel(soundEl.dataset.modelId)
      },
      onUpdate: (self) => {
        window.waveform = triangleRamp(self.progress)
      },
    })

    // ScrollTrigger for projects section
    ScrollTrigger.create({
      trigger: projectsEl,
      start: 'top center+=25%',
      end: 'bottom center',

      onEnter: () => {
        lenis.options.lerp = SCROLL_LERP_FASTER
        swapModel(projectsEl.dataset.modelId)
      },
      // onEnterBack: () => {
      //   swapModel(xpEl.dataset.modelId)
      // },
      onLeaveBack: () => {
        scrollToSound()
        swapModel(parseInt(projectsEl.dataset.modelId) - 1)
      },
    })

    // ScrollTrigger for the experience section
    ScrollTrigger.create({
      trigger: xpEl,
      start: 'top center+=15%',
      end: 'bottom center',

      onEnter: () => {
        swapModel(xpEl.dataset.modelId)
      },
      onEnterBack: () => {
        swapModel(xpEl.dataset.modelId)
      },
      onLeaveBack: () => {
        swapModel(parseInt(xpEl.dataset.modelId) - 1)
      },
    })

    // Animations for the timeline items
    const separatorEls = document.querySelectorAll('.timeline-date-separator')
    separatorEls.forEach((el) => {
      gsap.fromTo(
        el,
        {
          height: 0,
        },
        {
          height: '110%',
          duration: 1,
          // ease: 'power2.inOut',
          scrollTrigger: {
            trigger: el,
            start: 'top bottom',
            end: 'top center',
            scrub: true,
          },
        }
      )
    })

    // ScrollTrigger for the contact section
    const scrollToContact = () => {
      if (isScrollingToAnchor) return
      // lenis.stop()
      // lenis.start()
      lenis.scrollTo(getCenterScrollPosition(contactEl), {
        offset: 500,
        duration: 1,
        // force: true,
        lock: currentScrollVel < 25,
        lerp: SCROLL_LERP_SLOWER,
        easing: (t) => t,
      })
    }
    const contactEl: HTMLElement = document.querySelector('.introduction-contact')
    ScrollTrigger.create({
      trigger: contactEl,
      start: 'top center+=15%',
      onEnter: () => {
        scrollToContact()
        swapModel(contactEl.dataset.modelId)
      },
      onEnterBack: () => {
        swapModel(contactEl.dataset.modelId)
      },
      onLeaveBack: () => {
        swapModel(parseInt(contactEl.dataset.modelId) - 1)
      },
    })
  })
</script>

<style lang="scss" is:global>
  @reference '../styles/global.css';

  .wave-y-1 {
    display: inline-block;
    animation: 8s infinite alternate ease-in-out wave-x;
  }

  .wave-y-2 {
    display: inline-block;
    animation: 7s infinite alternate-reverse ease-in-out wave-x;
    animation-delay: 0.33s;
  }

  @keyframes wave-l {
    from {
      margin-left: -16px;
    }

    to {
      margin-left: 16px;
    }
  }

  @keyframes wave-r {
    from {
      margin-right: -16px;
    }

    to {
      margin-right: 16px;
    }
  }

  @keyframes wave-x {
    from {
      transform: translateX(-16px);
      /* margin-top: -16px; */
    }

    to {
      /* margin-top: 16px; */
      transform: translateX(16px);
    }
  }

  @keyframes wave-y {
    from {
      transform: translateY(-16px);
      /* margin-top: -16px; */
    }

    to {
      /* margin-top: 16px; */
      transform: translateY(16px);
    }
  }
</style>
